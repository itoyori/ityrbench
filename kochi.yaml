machines:
  wisteria-o:
    login_host: wisteria
    work_dir: /work/gc64/c64050
    kochi_root: /work/gc64/c64050/.kochi
    alloc_interact_script:
      - n_nodes=$(echo $KOCHI_ALLOC_NODE_SPEC | cut -f 1 -d ":" | sed 's/x/*/g' | bc)
      - pjsub --interact --sparam wait-time=unlimited -j -g gc64 -L rscgrp=interactive-o,node=$KOCHI_ALLOC_NODE_SPEC --mpi proc=$((n_nodes * 48))
    alloc_script:
      - n_nodes=$(echo $KOCHI_ALLOC_NODE_SPEC | cut -f 1 -d ":" | sed 's/x/*/g' | bc)
      - echo "$KOCHI_WORKER_LAUNCH_CMD" | pjsub -X -j -g gc64 -L rscgrp=regular-o,node=$KOCHI_ALLOC_NODE_SPEC,elapse=${KOCHI_ALLOC_TIME_LIMIT:-6:00:00} --mpi proc=$((n_nodes * 48))
    load_env_script:
      on_login_node: |
        module load odyssey > /dev/null
        export MPICC=mpifccpx
        export MPICXX=mpiFCCpx
        export fccpx_ENV="-Nclang -Knolargepage"
        export FCCpx_ENV="-Nclang -Knolargepage"
        module load cmake/3.22.2
      on_machine: |
        export PATH="/work/gc64/c64050/opt/odyssey/tmux/3.3a/bin:$PATH"
        . /work/gc64/c64050/venv/odyssey/bin/activate
        export MPICC=mpifcc
        export MPICXX=mpiFCC
        export fcc_ENV="-Nclang -Knolargepage"
        export FCC_ENV="-Nclang -Knolargepage"
        module load cmake/3.22.2
        export PYTHONPATH="/usr/share/gcc-8/python:${PYTHONPATH:+$PYTHONPATH}" # workaround for gdb bug (module 'libstdcxx' not found)

  squid-c:
    login_host: squid
    work_dir: /sqfs/work/G15442/v60680
    kochi_root: /sqfs/work/G15442/v60680/.kochi
    alloc_interact_script: |
      qlogin -q INTC --group=G15442 -b $KOCHI_ALLOC_NODE_SPEC -T openmpi
    alloc_script: |
      echo "$KOCHI_WORKER_LAUNCH_CMD" | qsub -q SCMEM -j o --group=G15442 -b $KOCHI_ALLOC_NODE_SPEC -T openmpi -l elapstim_req=${KOCHI_ALLOC_TIME_LIMIT:-6:00:00},memsz_job=unlimited
    load_env_script:
      on_login_node: |
        . /sqfs/work/G15442/v60680/venv/squid-c/bin/activate
        export TERM=xterm-256color
      on_machine: |
        . /sqfs/work/G15442/v60680/venv/squid-c/bin/activate
        export TERM=xterm-256color
        (module load BaseGCC/2022; mpirun -N 1 $NQSV_MPIOPTS /sqfs/home/v60680/launch_sshd.sh)

dependencies:
  ucx:
    recipes:
      - name: v1.11.2
        before_script: UCX_VERSION=1.11.2 CONFIGURE_OPTS="--disable-logging --disable-debug --disable-assertions --disable-params-check"
    script:
      - wget https://github.com/openucx/ucx/releases/download/v${UCX_VERSION}/ucx-${UCX_VERSION}.tar.gz
      - tar xvf ucx-${UCX_VERSION}.tar.gz
      - cd ucx-${UCX_VERSION}/
      - ./configure CFLAGS="${CFLAGS:+$CFLAGS} -gdwarf-4" --prefix=$KOCHI_INSTALL_PREFIX ${CONFIGURE_OPTS:+$CONFIGURE_OPTS}
      - make -j
      - make install

  openmpi:
    git: https://github.com/open-mpi/ompi.git
    depends:
      - name: ucx
        recipe: v1.11.2
    recipes:
      - name:   main
        branch: main
      - name:   v5.0.0rc7
        branch: v5.0.0rc7
    script:
      - ./autogen.pl
      - mkdir build
      - cd build/
      - CFLAGS="${CFLAGS:+$CFLAGS} -g -gdwarf-4"
      - ../configure ${CFLAGS:+CFLAGS="$CFLAGS"} --prefix=$KOCHI_INSTALL_PREFIX --with-ucx=$KOCHI_INSTALL_PREFIX_UCX --disable-man-pages --with-pmix=internal --with-hwloc=internal --with-libevent=internal --without-hcoll ${CONFIGURE_OPTS:+$CONFIGURE_OPTS}
      - make -j
      - make install
    activate_script:
      - export PATH=$KOCHI_INSTALL_PREFIX_OPENMPI/bin${PATH:+:$PATH}
      - export LD_LIBRARY_PATH=$KOCHI_INSTALL_PREFIX_OPENMPI/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}

  massivelogger:
    git: https://github.com/massivethreads/massivelogger.git
    recipes:
      - name: release
        branch: master
      - name: develop
        mirror: true
        mirror_dir: ../massivelogger
    script:
      - rm -rf $KOCHI_INSTALL_PREFIX/*
      - cp -af . $KOCHI_INSTALL_PREFIX

  boost:
    recipes:
      - name: v1.80.0
        envs:
          BOOST_VERSION: 1.80.0
    script: |
      BOOST_NAME=boost_$(sed 's/\./_/g' <<< $BOOST_VERSION)
      wget -q https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/${BOOST_NAME}.tar.bz2
      tar xf ${BOOST_NAME}.tar.bz2
      cd ${BOOST_NAME}/
      ./bootstrap.sh --prefix=$KOCHI_INSTALL_PREFIX
      if [[ $KOCHI_MACHINE == wisteria-o ]]; then
        echo "using clang : fcc : FCCpx ;" > user-config.jam
        CONFIGURE_OPTS="${CONFIGURE_OPTS:+$CONFIGURE_OPTS} --user-config=user-config.jam toolset=clang-fcc"
      fi
      ./b2 --without-python pch=off ${CONFIGURE_OPTS:+$CONFIGURE_OPTS} -j $(nproc) install
    activate_script:
      - export BOOST_ROOT=$KOCHI_INSTALL_PREFIX_BOOST
      - export LD_LIBRARY_PATH=$KOCHI_INSTALL_PREFIX_BOOST/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}

  itoyori:
    git: git@gitlab.eidos.ic.i.u-tokyo.ac.jp:shiina/itoyori.git
    depends:
      - name: openmpi
        recipe: v5.0.0rc7
        machines: [local, squid-c]
      - name: boost
        recipe: v1.80.0
        machines: [wisteria-o]
    recipes:
      - name: release
        branch: master
        script:
          - CC=$MPICC CXX=$MPICXX cmake -DCMAKE_INSTALL_PREFIX=$KOCHI_INSTALL_PREFIX -DBUILD_TESTING=off -DBUILD_EXAMPLES=off .
          - make -j all install
      - name: develop
        mirror: true
        mirror_dir: ../itoyori
        script:
          - CC=$MPICC CXX=$MPICXX cmake -DCMAKE_INSTALL_PREFIX=$KOCHI_INSTALL_PREFIX -DBUILD_TESTING=off -DBUILD_EXAMPLES=off .
          - make -j all install
      - name: develop_test
        on_machine: true
        mirror: true
        mirror_dir: ../itoyori
        script:
          - CC=$MPICC CXX=$MPICXX cmake -DCMAKE_INSTALL_PREFIX=$KOCHI_INSTALL_PREFIX .
          - make -j all test install
