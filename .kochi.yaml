machines:
  wisteria-o:
    login_host: wisteria
    work_dir: /work/gc64/c64050
    kochi_root: /work/gc64/c64050/.kochi
    alloc_interact_script:
      - n_nodes=$(echo $KOCHI_ALLOC_NODE_SPEC | cut -f 1 -d ":" | sed 's/x/*/g' | bc)
      - pjsub --interact --sparam wait-time=unlimited -j -g gc64 -L rscgrp=interactive-o,node=$KOCHI_ALLOC_NODE_SPEC --mpi proc=$((n_nodes * 48))
    alloc_script:
      - n_nodes=$(echo $KOCHI_ALLOC_NODE_SPEC | cut -f 1 -d ":" | sed 's/x/*/g' | bc)
      - echo "$KOCHI_WORKER_LAUNCH_CMD" | pjsub -X -j -g gc64 -L rscgrp=regular-o,node=$KOCHI_ALLOC_NODE_SPEC,elapse=${KOCHI_ALLOC_TIME_LIMIT:-6:00:00} --mpi proc=$((n_nodes * 48))
    load_env_script:
      on_login_node: |
        module load odyssey > /dev/null
        export MPICC=mpifccpx
        export MPICXX=mpiFCCpx
        export fccpx_ENV="-Nclang -Knolargepage"
        export FCCpx_ENV="-Nclang -Knolargepage"
        module load cmake/3.22.2
      on_machine: |
        . /work/gc64/c64050/venv/odyssey/bin/activate
        export MPICC=mpifcc
        export MPICXX=mpiFCC
        export fcc_ENV="-Nclang -Knolargepage"
        export FCC_ENV="-Nclang -Knolargepage"
        module load cmake/3.22.2

  ito-a:
    login_host: ito
    alloc_script: |
      if (( $KOCHI_ALLOC_NODE_SPEC == 1 )); then
        rscgrp=ito-ss
      elif (( $KOCHI_ALLOC_NODE_SPEC <= 4 )); then
        rscgrp=ito-s
      elif (( $KOCHI_ALLOC_NODE_SPEC <= 16 )); then
        rscgrp=ito-m
      elif (( $KOCHI_ALLOC_NODE_SPEC <= 64 )); then
        rscgrp=ito-l
      elif (( $KOCHI_ALLOC_NODE_SPEC <= 128 )); then
        rscgrp=ito-xl
      elif (( $KOCHI_ALLOC_NODE_SPEC <= 256 )); then
        rscgrp=ito-xxl
      else
        echo "Allocating $KOCHI_ALLOC_NODE_SPEC nodes is not allowed on ITO."
        exit 1
      fi
      echo "$KOCHI_WORKER_LAUNCH_CMD" | pjsub -j -o /dev/null -L rscunit=ito-a,rscgrp=$rscgrp,vnode=$KOCHI_ALLOC_NODE_SPEC,vnode-core=36,elapse=${KOCHI_ALLOC_TIME_LIMIT:-6:00:00}
    load_env_script:
      - module load python/3.6.2
      - . ~/venv/ito-a/bin/activate
      - module load gcc/10.2.0
      - export MPICC=mpicc
      - export MPICXX=mpicxx
      - module load cmake/3.18.2

dependencies:
  ucx:
    recipes:
      - name: v1.11.0
        before_script: UCX_VERSION=1.11.0
      - name: v1.12.1
        before_script: UCX_VERSION=1.12.1
    script:
      - unset MPICC
      - unset MPICXX
      - wget https://github.com/openucx/ucx/releases/download/v${UCX_VERSION}/ucx-${UCX_VERSION}.tar.gz
      - tar xvf ucx-${UCX_VERSION}.tar.gz
      - cd ucx-${UCX_VERSION}/
      - ./contrib/configure-release --prefix=$KOCHI_INSTALL_PREFIX
      # - ./contrib/configure-devel --prefix=$KOCHI_INSTALL_PREFIX
      - make -j
      - make install

  openmpi:
    git: https://github.com/open-mpi/ompi.git
    depends:
      - name: ucx
        recipe: v1.11.0
    recipes:
      - name:   v5.0.0rc7
        branch: v5.0.0rc7
      - name:   v5.0.x
        branch: v5.0.x
        depends:
          - name: ucx
            recipe: v1.12.1
    script:
      - ./autogen.pl
      - mkdir build
      - cd build/
      - CFLAGS="${CFLAGS:+$CFLAGS} -g"
      - ../configure CFLAGS="$CFLAGS" --prefix=$KOCHI_INSTALL_PREFIX --with-ucx=$KOCHI_INSTALL_PREFIX_UCX --disable-man-pages --with-pmix=internal --with-hwloc=internal --with-libevent=internal --without-hcoll
      - make -j
      - make install
    activate_script:
      - export PATH=$KOCHI_INSTALL_PREFIX_OPENMPI/bin${PATH:+:$PATH}
      - export LD_LIBRARY_PATH=$KOCHI_INSTALL_PREFIX_OPENMPI/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}

  massivethreads-dm:
    git: git@gitlab.eidos.ic.i.u-tokyo.ac.jp:shiina/massivethreads-dm.git
    depends:
      - name: openmpi
        recipe: v5.0.0rc7
        machines: [ito-a, local]
    recipes:
      - name: release
        branch: ityr
        script:
          - CFLAGS="${CFLAGS:+$CFLAGS} -O3 -g -Wall"
          - CCFLAGS="$CFLAGS" CXXFLAGS="$CFLAGS" ./configure MPICC=$MPICC MPICXX=$MPICXX $CONFIGURE_OPTS --with-comm-layer=mpi3 --prefix=$KOCHI_INSTALL_PREFIX
      - name: develop
        git: ../massivethreads-dm
        current_state: true
        script:
          - CFLAGS="${CFLAGS:+$CFLAGS} -O3 -g -Wall"
          - CCFLAGS="$CFLAGS" CXXFLAGS="$CFLAGS" ./configure MPICC=$MPICC MPICXX=$MPICXX $CONFIGURE_OPTS --with-comm-layer=mpi3 --prefix=$KOCHI_INSTALL_PREFIX
    before_script: |
      $MPICXX --version
      if [[ $KOCHI_MACHINE == wisteria-o ]]; then
        CFLAGS="${CFLAGS:+$CFLAGS} -DMADI_NULLIFY_PARENT_STACK=1"
        CONFIGURE_OPTS="${CONFIGURE_OPTS:+$CONFIGURE_OPTS} --host=aarch64"
      fi
      if [[ $KOCHI_MACHINE == local ]]; then
        CONFIGURE_OPTS="${CONFIGURE_OPTS:+$CONFIGURE_OPTS} --enable-polling"
      fi
    after_script:
      - make -j
      - make install

  pcas:
    git: git@gitlab.eidos.ic.i.u-tokyo.ac.jp:shiina/pcas.git
    depends:
      - name: openmpi
        recipe: v5.0.0rc7
        machines: [ito-a, local]
    recipes:
      - name: release
        branch: master
      - name: develop
        git: ../pcas
        current_state: true
      - name: develop_test
        git: ../pcas
        current_state: true
        on_machine: true
        script:
          - CC=$MPICC CXX=$MPICXX cmake -DCMAKE_INSTALL_PREFIX=$KOCHI_INSTALL_PREFIX .
          - make all test install
    script:
      - CC=$MPICC CXX=$MPICXX cmake -DCMAKE_INSTALL_PREFIX=$KOCHI_INSTALL_PREFIX -DBUILD_TESTING=OFF .
      - make install

  massivelogger:
    git: https://github.com/massivethreads/massivelogger.git
    recipes:
      - name: release
        branch: master
      - name: develop
        git: ../massivelogger
        current_state: true
    script:
      - rm -rf $KOCHI_INSTALL_PREFIX/*
      - cp -af . $KOCHI_INSTALL_PREFIX

  libunwind:
    recipes:
      - name: v1.6.2
        before_script: LIBUNWIND_VERSION=1.6.2
    script:
      - wget http://download.savannah.nongnu.org/releases/libunwind/libunwind-${LIBUNWIND_VERSION}.tar.gz
      - tar xvf libunwind-${LIBUNWIND_VERSION}.tar.gz
      - cd libunwind-${LIBUNWIND_VERSION}/
      - if [[ $KOCHI_MACHINE == wisteria-o ]]; then
      -   ./configure CC=fccpx CXX=FCCpx --prefix=$KOCHI_INSTALL_PREFIX --host=aarch64-linux-gnu
      - else
      -   ./configure --prefix=$KOCHI_INSTALL_PREFIX
      - fi
      - make -j
      - make install

  backward-cpp:
    git: https://github.com/bombela/backward-cpp
    depends:
      - name: libunwind
        recipe: v1.6.2
    recipes:
      - name:   v1.6
        branch: v1.6
    script:
      - mkdir -p $KOCHI_INSTALL_PREFIX/include
      - cp backward.hpp $KOCHI_INSTALL_PREFIX/include/

  jemalloc:
    recipes:
      - name: v5.3.0
        envs:
          JEMALLOC_VERSION: 5.3.0
          CONFIGURE_OPTS: ""
      - name: v5.3.0_prof
        envs:
          JEMALLOC_VERSION: 5.3.0
          CONFIGURE_OPTS: --enable-prof
    script:
      - wget https://github.com/jemalloc/jemalloc/releases/download/${JEMALLOC_VERSION}/jemalloc-${JEMALLOC_VERSION}.tar.bz2
      - tar xvf jemalloc-${JEMALLOC_VERSION}.tar.bz2
      - cd jemalloc-${JEMALLOC_VERSION}/
      - if [[ $KOCHI_MACHINE == wisteria-o ]]; then
      -   CONFIGURE_OPTS="${CONFIGURE_OPTS:+$CONFIGURE_OPTS} CC=fccpx CXX=FCCpx --host=aarch64-linux-gnu --with-lg-page=16"
      - fi
      - ./configure --prefix=$KOCHI_INSTALL_PREFIX $CONFIGURE_OPTS
      - make -j
      - make install

  # experimental
  itoyori:
    git: ../itoyori
    current_state: true
    on_machine: true
    depends:
      - name: openmpi
        recipe: v5.0.0rc7
        machines: [ito-a, local]
    recipes:
      - name: develop
    script:
      - CC=$MPICC CXX=$MPICXX cmake -DCMAKE_INSTALL_PREFIX=$KOCHI_INSTALL_PREFIX .
      - make all test install
