depends:
  - name: itoyori
    recipe: release

default_params:
  nodes: 1
  cores:
    - value: 48
      machines: [wisteria-o]
    - value: 76
      machines: [squid-c]
    - value: 6
      machines: [local]
  n_input: 10000
  repeats: 11
  theta: 0.2
  nspawn: 1000
  ncrit: 32
  P: 4
  kernel: laplace # laplace/helmholtz/biotsavart
  accuracy_test: 1
  # common params
  serial: 0
  sched: randws # randws/adws
  cache_policy: writeback_lazy # nocache/writethrough/writeback/writeback_lazy/getput
  dist_policy: default # default/block/cyclic/block_adws
  cache_size: 128 # MB
  block_size: 65536 # bytes
  sub_block_size: 4096 # bytes
  max_dirty: $cache_size # MB
  noncoll_alloc_size: 128 # MB
  shared_mem: 1
  prof: disabled # disabled/stats/trace
  dag_prof: disabled # disabled/workspan
  cache_prof: disabled # disabled/stats
  debugger: 0

default_name: exafmm
default_queue: node_${nodes}
default_duplicates: 1

batches:
  serial:
    name: exafmm_${batch_name}
    queue: serial
    params:
      nodes: 1
      cores: 1
      n_input: [1_000_000, 10_000_000]
      serial: 1
    artifacts:
      - type: stdout
        dest: exafmm/${batch_name}/n_${n_input}_${duplicate}.log
      - type: stats
        dest: exafmm/${batch_name}/n_${n_input}_${duplicate}.stats
      - type: file
        src: mpirun_out.txt
        dest: exafmm/${batch_name}/n_${n_input}_${duplicate}.out

  scale1M:
    name: exafmm_${batch_name}
    params:
      nodes:
        # - value: [1, 2:torus, 2x3:torus, 2x3x2:torus, 3x4x3:torus, 6x6x4:torus, 8x9x8:torus]
        - value: [1, 2:torus, 2x3:torus, 2x3x2:torus, 3x4x3:torus, 6x6x4:torus]
          machines: [wisteria-o]
        - value: [1, 2, 4, 8, 16, 32]
          machines: [squid-c]
      n_input: 1_000_000
      sched: [randws, adws]
      # cache_policy: [nocache, writethrough, writeback, writeback_lazy, getput]
      cache_policy: [nocache, writeback_lazy]
      dag_prof: workspan
    artifacts:
      - type: stdout
        dest: exafmm/${batch_name}/nodes_${nodes}_s_${sched}_p_${cache_policy}_${duplicate}.log
      - type: stats
        dest: exafmm/${batch_name}/nodes_${nodes}_s_${sched}_p_${cache_policy}_${duplicate}.stats
      - type: file
        src: mpirun_out.txt
        dest: exafmm/${batch_name}/nodes_${nodes}_s_${sched}_p_${cache_policy}_${duplicate}.out

  scale10M:
    name: exafmm_${batch_name}
    params:
      nodes:
        # - value: [1, 2:torus, 2x3:torus, 2x3x2:torus, 3x4x3:torus, 6x6x4:torus, 8x9x8:torus]
        - value: [1, 2:torus, 2x3:torus, 2x3x2:torus, 3x4x3:torus, 6x6x4:torus]
          machines: [wisteria-o]
        - value: [1, 2, 4, 8, 16, 32]
          machines: [squid-c]
      n_input: 10_000_000
      sched: [randws, adws]
      # cache_policy: [nocache, writethrough, writeback, writeback_lazy, getput]
      cache_policy: [nocache, writeback_lazy]
      dag_prof: workspan
      accuracy_test: 0
    artifacts:
      - type: stdout
        dest: exafmm/${batch_name}/nodes_${nodes}_s_${sched}_p_${cache_policy}_${duplicate}.log
      - type: stats
        dest: exafmm/${batch_name}/nodes_${nodes}_s_${sched}_p_${cache_policy}_${duplicate}.stats
      - type: file
        src: mpirun_out.txt
        dest: exafmm/${batch_name}/nodes_${nodes}_s_${sched}_p_${cache_policy}_${duplicate}.out

  sbsize:
    name: exafmm_${batch_name}
    params:
      nodes:
        - value: 3x4x3:torus
          machines: [wisteria-o]
      n_input: [1_000_000, 10_000_000]
      cache_policy: writeback_lazy
      sub_block_size: [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536]
      accuracy_test: 0
    artifacts:
      - type: stdout
        dest: exafmm/${batch_name}/n_${n_input}_s_${sub_block_size}_${duplicate}.log
      - type: stats
        dest: exafmm/${batch_name}/n_${n_input}_s_${sub_block_size}_${duplicate}.stats
      - type: file
        src: mpirun_out.txt
        dest: exafmm/${batch_name}/n_${n_input}_s_${sub_block_size}_${duplicate}.out

build:
  depend_params: [dist_policy, block_size, prof, dag_prof, cache_prof]
  script: |
    source build_common.bash

    CXXFLAGS="${CXXFLAGS:+$CXXFLAGS} -DITYR_ALLOCATOR_USE_DYNAMIC_WIN=false"

    CC=$MPICC CXX=$MPICXX cmake -DCMAKE_CXX_FLAGS="$CXXFLAGS" $CMAKE_OPTIONS .
    make clean
    make -j exafmm

run:
  depend_params: [nodes, cores, n_input, repeats, theta, nspawn, ncrit, P, kernel, accuracy_test, serial, sched, cache_policy, cache_size, sub_block_size, max_dirty, noncoll_alloc_size, shared_mem, prof, debugger]
  script: |
    source run_common.bash

    # export OMPI_MCA_common_tofu_num_mrq_entries=2097152 # 2048, 8192, 32768, 131072 (default), 524288, or 2097152

    if [[ $KOCHI_PARAM_SERIAL == 1 ]]; then
      config_name=${KOCHI_PARAM_KERNEL}_serial
    else
      config_name=${KOCHI_PARAM_KERNEL}_${KOCHI_PARAM_SCHED}_${KOCHI_PARAM_CACHE_POLICY}
    fi

    commands="
      ./exafmm/exafmm_${config_name}.out
        -v -T 1 -D
        $([[ $KOCHI_PARAM_ACCURACY_TEST == 0 ]] || echo -a)
        -n $KOCHI_PARAM_N_INPUT
        -r $KOCHI_PARAM_REPEATS
        -t $KOCHI_PARAM_THETA
        -s $KOCHI_PARAM_NSPAWN
        -c $KOCHI_PARAM_NCRIT
        -P $KOCHI_PARAM_P"

    n_nodes=$(echo $KOCHI_PARAM_NODES | cut -f 1 -d ":" | sed 's/x/*/g' | bc)

    if [[ $KOCHI_PARAM_DEBUGGER == 0 ]]; then
      ityr_mpirun $((n_nodes * KOCHI_PARAM_CORES)) $KOCHI_PARAM_CORES core $commands
    else
      MPIEXEC=mpitx ityr_mpirun $((n_nodes * KOCHI_PARAM_CORES)) $KOCHI_PARAM_CORES core gdb --args $commands
    fi

    if [[ $KOCHI_PARAM_PROF == trace ]]; then run_trace_viewer; fi
