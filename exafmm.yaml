depends:
  - name: massivethreads-dm
    recipe: release
  - name: pcas
    recipe: release
  - name: massivelogger
    recipe: release
  - name: backward-cpp
    recipe: v1.6
  - name: jemalloc
    recipe: v5.3.0
  - name: boost
    recipe: v1.80.0

default_params:
  nodes: 1
  cores:
    - value: 48
      machines: [wisteria-o]
    - value: 36
      machines: [ito-a]
    - value: 6
      machines: [local]
  n_input: 10000
  repeats: 10
  theta: 0.2
  nspawn: 3000
  ncrit: 64
  # common params
  cache_policy: writeback_lazy # serial/nocache/writethrough/writeback/writeback_lazy/getput
  dist_policy: cyclic # block/cyclic
  cache_size: 128 # MB
  block_size: 65536 # bytes
  max_dirty: $cache_size # MB
  shared_mem: 1
  logger: dummy # dummy/trace/stats
  allocator: jemalloc # sys/jemalloc
  debugger: 0

default_name: exafmm

build:
  depend_params: [cache_policy, dist_policy, block_size, logger]
  script: |
    source build_common.bash

    CFLAGS="${CFLAGS:+$CFLAGS} -DNDEBUG"

    make distclean
    MPICXX=$MPICXX CFLAGS=$CFLAGS make exafmm

run:
  depend_params: [nodes, cores, n_input, repeats, theta, nspawn, ncrit, cache_size, max_dirty, shared_mem, logger, allocator, debugger]
  script: |
    source run_common.bash

    commands="
      ./exafmm/examples/laplace
        -v -T 1 -D -a
        -n $KOCHI_PARAM_N_INPUT
        -r $KOCHI_PARAM_REPEATS
        -t $KOCHI_PARAM_THETA
        -s $KOCHI_PARAM_NSPAWN
        -c $KOCHI_PARAM_NCRIT
        -x $KOCHI_PARAM_CACHE_SIZE"

    n_nodes=$(echo $KOCHI_PARAM_NODES | cut -f 1 -d ":" | sed 's/x/*/g' | bc)

    if [[ $KOCHI_PARAM_DEBUGGER == 0 ]]; then
      ityr_mpirun $((n_nodes * KOCHI_PARAM_CORES)) $KOCHI_PARAM_CORES $commands
    else
      MPIEXEC=mpitx ityr_mpirun $((n_nodes * KOCHI_PARAM_CORES)) $KOCHI_PARAM_CORES gdb --args $commands
    fi

    if [[ $KOCHI_PARAM_LOGGER == trace ]]; then run_trace_viewer; fi
