depends:
  - name: itoyori
    recipe: release
  - name: big-anns
    recipe: dataset

default_params:
  nodes: 1
  cores:
    - value: 48
      machines: [wisteria-o]
    - value: 76
      machines: [squid-c]
    - value: 6
      machines: [local]
  dataset: msspacev-1M
  repeats: 1
  fast_check: 1
  # common params
  serial: 0
  sched: randws # randws/adws
  cache_policy: writeback_lazy # nocache/writethrough/writeback/writeback_lazy/getput
  dist_policy: default # default/block/cyclic/block_adws
  cache_size: 128 # MB
  block_size: 65536 # bytes
  sub_block_size: 512 # bytes
  max_dirty: $cache_size # MB
  noncoll_alloc_size: 64 # MB
  shared_mem: 1
  prof: disabled # disabled/stats/trace
  dag_prof: disabled # disabled/workspan
  cache_prof: disabled # disabled/stats
  debugger: 0

default_name: anns_hcnng
default_queue: node_${nodes}
default_duplicates: 1

build:
  depend_params: [dataset, dist_policy, block_size, prof, dag_prof, cache_prof]
  script: |
    source build_common.bash

    CXXFLAGS="${CXXFLAGS:+$CXXFLAGS} -DITYR_ALLOCATOR_USE_DYNAMIC_WIN=false"

    dataset_prefix=${KOCHI_PARAM_DATASET%-*}
    case $dataset_prefix in
      bigann)
        CXXFLAGS="${CXXFLAGS:+$CXXFLAGS} -DANNS_DATA_TYPE=uint8_t"
        ;;
      msspacev)
        CXXFLAGS="${CXXFLAGS:+$CXXFLAGS} -DANNS_DATA_TYPE=int8_t"
        ;;
      text2image)
        CXXFLAGS="${CXXFLAGS:+$CXXFLAGS} -DANNS_DATA_TYPE=float"
        ;;
      *) echo "Unknown dataset name: $dataset_prefix"; exit 1 ;;
    esac

    CC=$MPICC CXX=$MPICXX cmake -DCMAKE_CXX_FLAGS="$CXXFLAGS" $CMAKE_OPTIONS .
    make clean
    make -j anns_hcnng

run:
  depend_params: [nodes, cores, dataset, repeats, fast_check, serial, sched, cache_policy, cache_size, sub_block_size, max_dirty, noncoll_alloc_size, shared_mem, prof, debugger]
  script: |
    source run_common.bash

    if [[ $KOCHI_PARAM_SERIAL == 1 ]]; then
      config_name=serial
    else
      config_name=${KOCHI_PARAM_SCHED}_${KOCHI_PARAM_CACHE_POLICY}
    fi

    opts=""
    opts="$opts -a 1000"
    opts="$opts -R 3"
    opts="$opts -b 1"
    opts="$opts -r $KOCHI_PARAM_REPEATS"
    opts="$opts -fc $KOCHI_PARAM_FAST_CHECK"

    dataset_prefix=${KOCHI_PARAM_DATASET%-*}
    dataset_suffix=${KOCHI_PARAM_DATASET#*-}

    case $dataset_suffix in
      1M)   dataset_nb=1000000 ;;
      10M)  dataset_nb=10000000 ;;
      100M) dataset_nb=100000000 ;;
      *)    echo "Unknown dataset scale: $dataset_suffix"; exit 1 ;;
    esac

    case $dataset_prefix in
      bigann)
        opts="$opts -L 30"
        opts="$opts -f bin"
        opts="$opts -t uint8"
        opts="$opts -q ${KOCHI_INSTALL_PREFIX_BIG_ANNS}/bigann/query.public.10K.u8bin"
        opts="$opts -c ${KOCHI_INSTALL_PREFIX_BIG_ANNS}/bigann/bigann-${dataset_suffix}"
        opts="$opts ${KOCHI_INSTALL_PREFIX_BIG_ANNS}/bigann/base.1B.u8bin.crop_nb_${dataset_nb}"
        ;;
      msspacev)
        opts="$opts -L 50"
        opts="$opts -f bin"
        opts="$opts -t int8"
        opts="$opts -q ${KOCHI_INSTALL_PREFIX_BIG_ANNS}/MSSPACEV1B/query.i8bin"
        opts="$opts -c ${KOCHI_INSTALL_PREFIX_BIG_ANNS}/MSSPACEV1B/msspacev-gt-${dataset_suffix}"
        opts="$opts ${KOCHI_INSTALL_PREFIX_BIG_ANNS}/MSSPACEV1B/spacev1b_base.i8bin.crop_nb_${dataset_nb}"
        ;;
      text2image)
        opts="$opts -L 30"
        opts="$opts -f bin"
        opts="$opts -t float"
        opts="$opts -D 1"
        opts="$opts -q ${KOCHI_INSTALL_PREFIX_BIG_ANNS}/text2image1B/query.public.100K.fbin"
        opts="$opts -c ${KOCHI_INSTALL_PREFIX_BIG_ANNS}/text2image1B/text2image-${dataset_suffix}"
        opts="$opts ${KOCHI_INSTALL_PREFIX_BIG_ANNS}/text2image1B/base.1B.fbin.crop_nb_${dataset_nb}"
        ;;
      *) echo "Unknown dataset name: $dataset_prefix"; exit 1 ;;
    esac

    commands="./anns_hcnng_${config_name}.out $opts"

    n_nodes=$(echo $KOCHI_PARAM_NODES | cut -f 1 -d ":" | sed 's/x/*/g' | bc)

    if [[ $KOCHI_PARAM_DEBUGGER == 0 ]]; then
      ityr_mpirun $((n_nodes * KOCHI_PARAM_CORES)) $KOCHI_PARAM_CORES core $commands
    else
      MPIEXEC=mpitx ityr_mpirun $((n_nodes * KOCHI_PARAM_CORES)) $KOCHI_PARAM_CORES core gdb --args $commands
    fi

    if [[ $KOCHI_PARAM_PROF == trace ]]; then run_trace_viewer; fi
